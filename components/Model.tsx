/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useLayoutEffect, useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three/examples/jsm/loaders/GLTFLoader";
type ModelProps = {
  file: string;
};
const Model = (props: ModelProps) => {
  
  const gltf = useGLTF(props.file) as GLTF | GLTF[];

  const scene = Array.isArray(gltf) ? gltf[0].scene : gltf.scene;

  return <primitive object={scene} />;
  /* const { nodes, materials } = useGLTF(props.file);
  useLayoutEffect(() => {
    Object.values(materials).forEach((material) => {
      material.roughness = 0
    })
  }, []) */
  
}
useGLTF.preload("/model.glb");

export default Model;
{/* `<group {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.ObjObject.geometry}
        material={materials.palette}
        rotation={[Math.PI / 2, 0, 0]}
      />
    </group>` */}